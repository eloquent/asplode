{"service_name":"travis-ci","service_job_id":"9730478","git":{"branch":"(detached from 46bbcd6)","head":{"id":"46bbcd68069fe466ff5c3cd3ecb0c18504f9b249","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"Show coverage percentage for master branch."},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/asplode.git"}]},"run_at":"2013-08-01 10:50:55 +0000","source_files":[{"name":"Eloquent\/Asplode\/Asplode.php","source":"<?php\n\n\/*\n * This file is part of the Asplode package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Asplode;\n\nuse ErrorException;\nuse Icecave\\Isolator\\Isolator;\n\n\/**\n * The main Asplode error handler.\n *\n * Also provides utility methods for managing PHP's error handler stack.\n *\/\nclass Asplode\n{\n    \/**\n     * Asserts that an error handling is configured in a way that is compatible\n     * with code expecting error exceptions.\n     *\n     * @param Isolator|null $isolator The isolator to use.\n     *\n     * @throws Exception\\ErrorHandlingConfigurationException If error handling\n     *     is not configured correctly.\n     *\/\n    public static function assertCompatibleHandler(Isolator $isolator = null)\n    {\n        $isolator = Isolator::get($isolator);\n        $message = 'Error handling is incorrectly configured.';\n\n        try {\n            $isolator->trigger_error($message, E_USER_DEPRECATED);\n        } catch (ErrorException $e) {\n            if (\n                $e->getMessage() === $message &&\n                $e->getSeverity() === E_USER_DEPRECATED\n            ) {\n                return;\n            }\n        }\n\n        throw new Exception\\ErrorHandlingConfigurationException;\n    }\n\n    \/**\n     * Gets the current error handler without removing it from the stack.\n     *\n     * @param Isolator|null $isolator The isolator to use.\n     *\/\n    public static function currentErrorHandler(Isolator $isolator = null)\n    {\n        $isolator = Isolator::get($isolator);\n\n        $errorHandler = static::popErrorHandler($isolator);\n        if (null !== $errorHandler) {\n            static::pushErrorHandler($errorHandler, $isolator);\n        }\n\n        return $errorHandler;\n    }\n\n    \/**\n     * Gets the current error handler stack without changing the stack.\n     *\n     * @param Isolator|null $isolator The isolator to use.\n     *\/\n    public static function currentErrorHandlerStack(Isolator $isolator = null)\n    {\n        $isolator = Isolator::get($isolator);\n\n        $errorHandlers = static::removeErrorHandlers($isolator);\n        static::restoreErrorHandlers($errorHandlers, $isolator);\n\n        return $errorHandlers;\n    }\n\n    \/**\n     * Pushes an error handler on to the stack.\n     *\n     * @param callable $errorHandler The error handler to push on to the\n     *     stack.\n     * @param Isolator|null $isolator The isolator to use.\n     *\/\n    public static function pushErrorHandler(\n        $errorHandler,\n        Isolator $isolator = null\n    ) {\n        Isolator::get($isolator)->set_error_handler($errorHandler);\n    }\n\n    \/**\n     * Pops an error handler off the stack.\n     *\n     * @param Isolator|null $isolator The isolator to use.\n     *\n     * @return callable|null The error handler that was removed from the stack,\n     *     or null if the stack is empty.\n     *\/\n    public static function popErrorHandler(Isolator $isolator = null)\n    {\n        $isolator = Isolator::get($isolator);\n\n        $errorHandler = $isolator->set_error_handler(function() {});\n        $isolator->restore_error_handler();\n        $isolator->restore_error_handler();\n\n        return $errorHandler;\n    }\n\n    \/**\n     * Removes all error handlers from the stack.\n     *\n     * @param Isolator|null $isolator The isolator to use.\n     *\n     * @return array<callable> The removed error handlers.\n     *\/\n    public static function removeErrorHandlers(Isolator $isolator = null)\n    {\n        $isolator = Isolator::get($isolator);\n\n        $errorHandlers = array();\n        while (null !== ($errorHandler = static::popErrorHandler($isolator))) {\n            $errorHandlers[] = $errorHandler;\n        }\n\n        return $errorHandlers;\n    }\n\n    \/**\n     * Restores a stack of error handlers.\n     *\n     * @param array<callable> $errorHandlers The error handlers to restore.\n     * @param Isolator|null   $isolator      The isolator to use.\n     *\/\n    public static function restoreErrorHandlers(\n        array $errorHandlers,\n        Isolator $isolator = null\n    ) {\n        $isolator = Isolator::get($isolator);\n\n        foreach ($errorHandlers as $errorHandler) {\n            static::pushErrorHandler($errorHandler, $isolator);\n        }\n    }\n\n    \/**\n     * Invokes a callable by bypassing any error handlers, and using PHP's\n     * native error handling.\n     *\n     * This method is useful for executing legacy PHP code that relies upon '@'\n     * suppression or other techniques that are incompatible with\n     * exception-based error handling.\n     *\n     * @param callable      $callable The callable to invoke.\n     * @param Isolator|null $isolator The isolator to use.\n     *\n     * @return mixed The result of the callable's invocation.\n     *\/\n    public static function unsafe($callable, Isolator $isolator = null)\n    {\n        $isolator = Isolator::get($isolator);\n\n        $errorHandlers = static::removeErrorHandlers($isolator);\n        $result = $callable();\n        static::restoreErrorHandlers($errorHandlers, $isolator);\n\n        return $result;\n    }\n\n    \/**\n     * Creates a new instance of Asplode.\n     *\n     * This method exists solely to allow one-line installation in PHP 5.3.\n     *\n     * @return Asplode A new Asplode instance.\n     *\/\n    public static function instance()\n    {\n        return new static;\n    }\n\n    \/**\n     * Construct a new error handler.\n     *\n     * @param Isolator|null $isolator The isolator to use.\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Installs this error handler.\n     *\n     * @throws Exception\\AlreadyInstalledException If this error handler is\n     *     already the top-most handler on the stack.\n     *\/\n    public function install()\n    {\n        if (static::currentErrorHandler($this->isolator()) === $this) {\n            throw new Exception\\AlreadyInstalledException;\n        }\n\n        static::pushErrorHandler($this, $this->isolator());\n    }\n\n    \/**\n     * Uninstalls this error handler.\n     *\n     * @throws Exception\\NotInstalledException If this error handler is not the\n     *     top-most handler on the stack.\n     *\/\n    public function uninstall()\n    {\n        $errorHandler = static::popErrorHandler($this->isolator());\n        if ($errorHandler !== $this) {\n            static::pushErrorHandler($errorHandler, $this->isolator());\n\n            throw new Exception\\NotInstalledException;\n        }\n    }\n\n    \/**\n     * Handles a PHP error.\n     *\n     * @param integer $severity The severity of the error.\n     * @param string  $message  The error message.\n     * @param string  $filename The filename in which the error was raised.\n     * @param integer $lineno   The line number in which the error was raised.\n     *\n     * @throws ErrorException Representing the error.\n     *\/\n    public function handleError($severity, $message, $filename, $lineno)\n    {\n        throw new ErrorException($message, 0, $severity, $filename, $lineno);\n    }\n\n    \/**\n     * Handles a PHP error.\n     *\n     * @param integer $severity The severity of the error.\n     * @param string  $message  The error message.\n     * @param string  $filename The filename in which the error was raised.\n     * @param integer $lineno   The line number in which the error was raised.\n     *\n     * @throws ErrorException Representing the error.\n     *\/\n    public function __invoke($severity, $message, $filename, $lineno)\n    {\n        return $this->handleError($severity, $message, $filename, $lineno);\n    }\n\n    \/**\n     * @return Isolator\n     *\/\n    protected function isolator()\n    {\n        return $this->isolator;\n    }\n\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,null,null,2,2,null,1,1,1,1,null,null,null,1,null,null,null,null,null,null,null,null,null,6,null,6,6,2,2,null,6,null,null,null,null,null,null,null,null,null,1,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,11,11,null,null,null,null,null,null,null,null,null,null,null,12,null,null,12,12,null,12,null,null,null,null,null,null,null,null,null,null,null,6,null,6,6,6,6,null,6,null,null,null,null,null,null,null,null,null,null,null,null,6,null,6,6,6,6,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,19,19,null,null,null,null,null,null,null,null,null,5,1,null,null,4,4,null,null,null,null,null,null,null,null,null,2,2,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,7,null,null,null,null]},{"name":"Eloquent\/Asplode\/Exception\/AlreadyInstalledException.php","source":"<?php\n\n\/*\n * This file is part of the Asplode package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Asplode\\Exception;\n\nuse Exception as NativeException;\n\n\/**\n * This Asplode instance has already been installed.\n *\/\nfinal class AlreadyInstalledException extends LogicException\n{\n    \/**\n     * Construct a new already installed exception.\n     *\n     * @param NativeException|null $previous The previous exception, if\n     *     available.\n     *\/\n    public function __construct(NativeException $previous = null)\n    {\n        parent::__construct(\n            'This instance of Asplode has already been installed.',\n            $previous\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,1,null]},{"name":"Eloquent\/Asplode\/Exception\/ErrorHandlingConfigurationException.php","source":"<?php\n\n\/*\n * This file is part of the Asplode package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Asplode\\Exception;\n\nuse Exception as NativeException;\n\n\/**\n * PHP's error handling is incorrectly configured.\n *\/\nfinal class ErrorHandlingConfigurationException extends LogicException\n{\n    \/**\n     * Construct a new error handling configuration exception.\n     *\n     * @param NativeException|null $previous The previous exception, if\n     *     available.\n     *\/\n    public function __construct(NativeException $previous = null)\n    {\n        parent::__construct(\n            'Error handling is incorrectly configured.',\n            $previous\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,1,null]},{"name":"Eloquent\/Asplode\/Exception\/Exception.php","source":"<?php\n\n\/*\n * This file is part of the Asplode package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Asplode\\Exception;\n\n\/**\n * Interface implemented by all Asplode-related exceptions.\n *\/\ninterface Exception\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Asplode\/Exception\/LogicException.php","source":"<?php\n\n\/*\n * This file is part of the Asplode package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Asplode\\Exception;\n\nuse Exception as NativeException;\nuse LogicException as NativeLogicException;\n\n\/**\n * Abstract base class for exceptions that arise from logic errors in code.\n *\/\nabstract class LogicException extends NativeLogicException implements Exception\n{\n    \/**\n     * Construct a new logic exception.\n     *\n     * @param string               $message  The exception message.\n     * @param NativeException|null $previous The previous exception, if\n     *     available.\n     *\/\n    public function __construct($message, NativeException $previous = null)\n    {\n        parent::__construct((string) $message, 0, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,4,null]},{"name":"Eloquent\/Asplode\/Exception\/NotInstalledException.php","source":"<?php\n\n\/*\n * This file is part of the Asplode package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Asplode\\Exception;\n\nuse Exception as NativeException;\n\n\/**\n * This Asplode instance has not been installed.\n *\/\nfinal class NotInstalledException extends LogicException\n{\n    public function __construct(NativeException $previous = null)\n    {\n        parent::__construct(\n            \"This instance of Asplode has not been installed.\",\n            $previous\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,1,null]}]}